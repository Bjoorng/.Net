@using WebApp.Clients.TodoLists
@inject IJSRuntime JSRuntime;
@inject NavigationManager Navigation;
@inject CreateItemClient CreateItemClient;
@inject GetByIdClient GetByIdClient;
@inject DeleteItemClient DeleteItemClient;
@inject UpdateItemDoneClient UpdateItemDoneClient;

@page "/details/{id:guid}"

<h3>ListDetails</h3>

@if (list != null)
{
    <div>
        <div>Add an Item</div>
        <EditForm Model="itemTitle" OnValidSubmit="AddItem">
            <div class="d-flex justify-content-between align-items-center">
                <div>
                    <label for="ListTitle" class="col-sm-2 col-form-label">Title:</label>
                    <InputText id="ListTitle" @bind-Value="itemTitle" class="form-control"></InputText>
                </div>
                <button type="submit" class="btn btn-primary h-50">Add <i class="fa-regular fa-floppy-disk"></i></button>
            </div>
        </EditForm>
    </div>

    <div class="listTitle d-flex justify-content-center">
        <div class="my-5">@list.Text</div>
        <div>@list.IsDone</div>
    </div>
    <div>
        @foreach (var item in list.ListItems)
        {
            <div class="d-flex justify-content-between my-2">
                <div id="item">
                    @if (!item.IsDone)
                    {
                        <i class="fa-regular fa-circle"></i>
                    }
                    else
                    {
                        <i class="fa-solid fa-circle-check"></i>
                    }
                    <div>
                        <div>@item.Text</div>
                    </div>
                    <div>
                        <button class="btn btn-success" @onclick="() => UpdateDone(item.Id)">
                            @if (!item.IsDone)
                            {
                                <i class="fa-solid fa-check"></i>
                            }
                            else
                            {
                                <i class="fa-solid fa-rotate-left"></i>
                            }
                        </button>
                        <button class="btn btn-warning" @onclick="() => GoToUpdate(item.Id)">Edit</button>
                        <button class="btn btn-danger" @onclick="() => DeleteItem(item.Id)"><i class="fa-solid fa-trash"></i></button>
                    </div>
                </div>
            </div>
        }
    </div>
}
else
{
    <div>Loading... </div>
}

@code {

    [Parameter]
    public Guid Id { get; set; }

    private string itemTitle = string.Empty;

    private bool itemDone { get; set; }

    private GetByIdResponse list { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            list = await GetByIdClient.GetByIdAsync(Id);
        }
        catch (Exception e)
        {
            Console.Write(e);
        }
    }

    public async Task AddItem()
    {
        try
        {
            CreateItemRequest createItemRequest = new(itemTitle, Id);
            await CreateItemClient.CreateItemAsync(createItemRequest, Id);
            list = await GetByIdClient.GetByIdAsync(Id);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
    }

    public async void DeleteItem(Guid itemId)
    {
        try
        {
            await DeleteItemClient.DeleteAsync(itemId);
            list = await GetByIdClient.GetByIdAsync(Id);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
    }

    public async Task UpdateDone(Guid itemId)
    {
        try
        {
            var itemUpdateDoneRequest = new ItemUpdateDoneRequest(itemId);
            await UpdateItemDoneClient.UpdateItemDoneAsync(itemUpdateDoneRequest.Id, itemUpdateDoneRequest);
            list = await GetByIdClient.GetByIdAsync(Id);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
    }

    public void GoToUpdate(Guid id)
    {
        Navigation.NavigateTo($"updateItem/{id}");
    }
}
